camel model EPCvRANApp{
	application EPCvRANApp{
        version '1.0'  
    }
    
deployment type model EPCvRANAppDeployment{
    	software Component_vRAN{  
		// define first software element- application
           requirements vRANRequirementSet
           //name requirements set,which will be defined later on 
                     
                        
                        
         script configuration ComponentvRANConfiguration{
                download 'git clone https://PKulesza-iswireless:12P12k12_PL@github.com/PKulesza-iswireless/RAMDataGenerator.git ~/RAMDataGenerator && git clone https://PKulesza-iswireless:12P12k12_PL@github.com/PKulesza-iswireless/RAMSensor.git ~/RAMSensor'
               	install 'sudo apt-get update && sudo apt-get -y install maven && sudo apt-get -y install default-jdk && mkdir /home/ubuntu/data && mkdir /home/ubuntu/metric-collector'
                configure 'cd ~/RAMDataGenerator && sudo mvn clean compile package -f ~/RAMDataGenerator/pom.xml && cd ~/RAMSensor && sudo mvn clean compile assembly:single -f ~/RAMSensor/pom.xml'
                start 'cd ~/RAMDataGenerator/target && sudo nohup java -cp ~/RAMDataGenerator/target/RAMGenerator-0.0.1-SNAPSHOT.jar data.App >~/output1.txt 2>&1 & cd ~/RAMSensor/target && sudo nohup java -cp ~/RAMSensor/target/RAMSensor-3.0.0-SNAPSHOT-jar-with-dependencies.jar sensor.App -p ~/RAMSensor/src/main/resources/metric.generator.properties >~/output2.txt 2>&1 &'
               
         		}
            provided communication ComponentvRANPort port 9999
            required communication ComponentEPCPortReq port 9998 mandatory
        }
        
        software Component_EPC{  
		// define first software element- application
		 [MetaDataModel.MELODICMetadataSchema.UtilityNotions.UtilityRelatedProperties.Unmoveable]
           requirements EPCRequirementSet
           //name requirements set,which will be defined later on 
                        
            script configuration ComponentEPCConfiguration{
                download 'sudo cat download > download'
               	install 'sudo cat install > install'
                configure 'sudo cat configure > configure'
                start 'sudo cat start > start'
               
            }
            provided communication ComponentEPCPort port 9998
        }
        
        communication vRANToEPC from Component_vRAN.ComponentEPCPortReq to Component_EPC.ComponentEPCPort
        
         requirements vRANRequirementSet{
        	//invoking requirements defined in requirement model 
        	resource EPCvRANApp_Requirement.vRANReqs
        	horizontal scale EPCvRANApp_Requirement.HorizontalScaleTwoNodesvRAN
         	//image EPCvRANApp_Requirement.Image_vRAN

        }  
        
        requirements EPCRequirementSet{
        	//invoking requirements defined in requirement model 
        	resource EPCvRANApp_Requirement.EPCReqs
        	horizontal scale EPCvRANApp_Requirement.HorizontalScaleTwoNodesEPC
         	//image EPCvRANApp_Requirement.Image_EPC

        }  
    }
	requirement model EPCvRANApp_Requirement{
    //described in Requirements Modelling and Resource Requirements
        resource requirement vRANReqs{
        	//requirements for cores and RAM, need to be indicated for each component
        	feature coresApp{
        		[MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.CPU]
        		attribute minCoresApp [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.CPU.hasMinNumberofCores] : int 1
        		attribute maxCoresApp [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.CPU.hasMaxNumberofCores] : int 8
        		
        	}  
        	feature ramApp{
        		[MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.RAM]
				attribute minRamApp [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.RAM.TotalMemory.totalMemoryHasMin]:int 1000
				attribute maxRamApp [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.RAM.TotalMemory.totalMemoryHasMax]:int 10072
        	}
        }
        resource requirement EPCReqs{
            feature coresApp{
        		[MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.CPU]
        		attribute minCoresApp [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.CPU.hasMinNumberofCores] : int 1
        		attribute maxCoresApp [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.CPU.hasMaxNumberofCores] : int 8
        		
        	}  
        	feature ramApp{
        		[MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.RAM]
				attribute minRamApp [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.RAM.TotalMemory.totalMemoryHasMin]:int 1000
				attribute maxRamApp [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.RAM.TotalMemory.totalMemoryHasMax]:int 10072
        	}
        }
        
        
		//number of instances 
		
		horizontal scale requirement HorizontalScaleTwoNodesvRAN [1,1]
		horizontal scale requirement HorizontalScaleTwoNodesEPC [1,1]

		//set name of image for the VMs
		//image requirement Image_vRAN  [ 'ubuntu-bionic-18.04-amd64-server-20190627.1-disabled-unattented-upgrades','ubuntu-1804' ]
		//image requirement Image_EPC  [ 'ubuntu-bionic-18.04-amd64-server-20190627.1-disabled-unattented-upgrades','ubuntu-1804' ]
		
		slo CPUUtilisationTooLowOrTooHigh constraint vRANConstraintModel.CPUUtilisationTooLowOrTooHigh
        slo RAMUtilisationTooLowOrTooHigh constraint vRANConstraintModel.RAMUtilisationTooLowOrTooHigh
        slo MinimumCPU constraint vRANConstraintModel.MinimumCores
        slo MinimumRAM constraint vRANConstraintModel.MinimumRAM
        
		
		

    }  
   metric type model vRANMetricModel{
		measurable attribute ram [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.RAM]
		measurable attribute cores [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.CPU]
		
		measurable attribute cardinality [MetaDataModel.MELODICMetadataSchema.UtilityNotions.UtilityRelatedProperties.Cardinality]
        measurable attribute price [ MetaDataModel.MELODICMetadataSchema.UtilityNotions.UtilityRelatedProperties.Cost]
        measurable attribute cores [MetaDataModel.MELODICMetadataSchema.ApplicationPlacementModel.IaaS.Processing.CPU]
        
        measurable attribute cpuUtilisation sensors [vRANMetricModel.CPUUtilisation_Sensor]
        measurable attribute ramUtilisation sensors [vRANMetricModel.RAMUtilisation_AppSensor]
		
	       
        object context vRANDeploymentContext{
            component EPCvRANAppDeployment.Component_vRAN
        }
        
        sensor CPUUtilisation_Sensor{
			config 'de.uniulm.omi.cloudiator.visor.sensors.SystemCpuUsageSensor'
		}
		
		
		template RawCPUUtilisationTemplate{
            attribute cpuUtilisation
            unit UnitTemplateCamelModel.UnitTemplateModel.Percentage
            value type TypeTemplateCamelModel.TypeTemplateModel.ZeroToHundredDouble
        }
        
        schedule RawCPUUtilSchedule{
        	interval 5
        	time unit UnitTemplateCamelModel.UnitTemplateModel.Seconds 
        }
        
        schedule AvgCPUUtilSchedule{
        	interval 30
        	time unit UnitTemplateCamelModel.UnitTemplateModel.Seconds
        }
        
        window AvgCPUUtilWindow{
        	type sliding
        	size type measurements-only
        	measurement size 30
        }
        
        
        raw metric context RawCPUUtilisationContext{
        	metric vRANMetricModel.AppCPUUtilisation
        	sensor vRANMetricModel.CPUUtilisation_Sensor
        	window AvgCPUUtilWindow
        	schedule RawCPUUtilSchedule
        	object context vRANDeploymentContext
        }
        
        raw metric AppCPUUtilisation{
            template RawCPUUtilisationTemplate
        }
        
        composite metric AvgCPUUtilisation{
        	template MetricTemplateCamelModel.MetricTemplateModel.CPUUtilisationTemplate
        	
        	formula:('mean(AppCPUUtilisation)')
        }
        
        composite metric context AvgCPUUtilisationContext{
        	metric AvgCPUUtilisation
        	grouping per-instance
        	window AvgCPUUtilWindow
        	schedule AvgCPUUtilSchedule
        	object context vRANDeploymentContext
        	composing contexts [RawCPUUtilisationContext]
        }
        
        
        
        sensor RAMUtilisation_AppSensor{
        	isPush
			config '12345'
		}
		
		
		template RawRAMUtilisationTemplate{
            attribute ramUtilisation
            unit UnitTemplateCamelModel.UnitTemplateModel.Percentage
            value type TypeTemplateCamelModel.TypeTemplateModel.ZeroToHundredDouble
        }
        
        schedule RawRAMUtilSchedule{
        	interval 5
        	time unit UnitTemplateCamelModel.UnitTemplateModel.Seconds 
        }
        
        schedule AvgRAMUtilSchedule{
        	interval 30
        	time unit UnitTemplateCamelModel.UnitTemplateModel.Seconds
        }
        
        window AvgRAMUtilWindow{
        	type sliding
        	size type measurements-only
        	measurement size 30
        }
        
        
        raw metric context RawRAMUtilisationContext{
        	metric vRANMetricModel.AppRAMUtilisation
        	sensor vRANMetricModel.RAMUtilisation_AppSensor
        	window AvgRAMUtilWindow
        	schedule RawRAMUtilSchedule
        	object context vRANDeploymentContext
        }
        
        raw metric AppRAMUtilisation{
            template RawRAMUtilisationTemplate
        }
        
        composite metric AvgRAMUtilisation{
        	template MetricTemplateCamelModel.MetricTemplateModel.RAMUtilisationTemplate
        	
        	formula:('mean(AppRAMUtilisation)')
        }
        
        composite metric context AvgRAMUtilisationContext{
        	metric AvgRAMUtilisation
        	grouping per-instance
        	window AvgRAMUtilWindow
        	schedule AvgRAMUtilSchedule
        	object context vRANDeploymentContext
        	composing contexts [RawRAMUtilisationContext]
        }
        
        
     	template CoresTemplate{
            attribute cores
            unit UnitTemplateCamelModel.UnitTemplateModel.Cores
            value type TypeTemplateCamelModel.TypeTemplateModel.ZeroToPositiveInfinityInteger
}
       
		variable ActWorkerCores{
		    template CoresTemplate
		    component EPCvRANAppDeployment.Component_vRAN
		    //current-config
		}
		
		        
		variable WorkerCores{
		    template CoresTemplate
		    component EPCvRANAppDeployment.Component_vRAN
		}
		   
		template RAMTemplate{
		attribute ram
		unit UnitTemplateCamelModel.UnitTemplateModel.MegaBytes//not sure about this unit
		value type TypeTemplateCamelModel.TypeTemplateModel.ZeroToPositiveInfinityInteger
		}
		
		variable ActWorkerRAM{
		    template RAMTemplate
		    component EPCvRANAppDeployment.Component_vRAN
		    //current-config
		}
		       
		variable WorkerRAM{
		    template RAMTemplate
		    component EPCvRANAppDeployment.Component_vRAN
		}
		   
		variable MinimumCores{
		    template CoresTemplate
		    formula: ('WorkerCores - ceil(ActWorkerCores * (1/50) / (AvgCPUUtilisation))') // 1/50 is the target CPU utilization
		}
		
		variable MinimumRAM{
		    template RAMTemplate
		    formula: ('WorkerRAM - ceil(ActWorkerRAM * (1/50) / (AvgRAMUtilisation))') // 1/50 is the target RAM utilization
		}  
        
    
        
        }
        
    constraint model vRANConstraintModel{
        metric constraint CPUUtilizationTooHigh: [vRANMetricModel.AvgCPUUtilisationContext] > 80.0
		metric constraint CPUUtilizationTooLow: [vRANMetricModel.AvgCPUUtilisationContext] < 20.0
		logical constraint CPUUtilisationTooLowOrTooHigh : or (CPUUtilizationTooHigh, CPUUtilizationTooLow)
		
		metric constraint RAMUtilizationTooHigh: [vRANMetricModel.AvgRAMUtilisationContext] > 80.0
		metric constraint RAMUtilizationTooLow: [vRANMetricModel.AvgRAMUtilisationContext] < 20.0
		logical constraint RAMUtilisationTooLowOrTooHigh : or (RAMUtilizationTooHigh, RAMUtilizationTooLow)
		
		variable constraint MinimumCores : vRANMetricModel.MinimumCores > 0.0
		variable constraint MinimumRAM : vRANMetricModel.MinimumRAM > 0.0
    }
    
   
}